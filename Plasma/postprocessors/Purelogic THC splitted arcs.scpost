function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Purelogic post processor for THC screenset.\n")
   ctrl:AppendText("Every full circle will be splitted into two parts\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Modal G-codes and coordinates\n")
   ctrl:AppendText("Comments enclosed with ( and )\n")
   ctrl:AppendText("M03/M05 turn the torch on/off\n")
   ctrl:AppendText("Incremental IJ\n")
   ctrl:AppendText("The torch is referenced at every cut start\n")
   ctrl:AppendText("Designed for use with Mach3 and Purelogic THC screenset and macros\n")
end

function OnInit()

   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   post.Text (" (Post processor: ", postName, ")\n")
   post.Text (" (Date: ", date, ")\n")
   if(scale == metric) then
      post.Text (" G21 (Units: Metric)\n") --metric mode
   else
      post.Text (" G20 (Units: Inches)\n") --inch mode
   end
   post.Text (" G53 G90 G40\n F1\n S500\n")

   post.Text (" M906\n")
   post.Text (" M901\n")

   switchoffset = -0.08
   bigarcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   post.Text (" M05 M30\n")
end

function OnRapid()
   -- disable Z movement
   if(math.hypot(endX-currentX , endY-currentY) < 0.001) then return end
   post.ModalText (" G00")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.Eol()
end

function OnMove()
   if(math.hypot(endX-currentX , endY-currentY) < 0.001) then return end
   post.ModalText (" G01")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.Eol()
end

function OnArc()
   Ival = arcCentreX - currentX
   Jval = arcCentreY - currentY
   NewX = 0
   NewY = 0
   Splitting = 0
   if(arcAngle <0) then
      post.ModalText (" G03")
      if(arcAngle < -4) then
          Splitting = 1
      end          
   else
      post.ModalText (" G02")
      if(arcAngle > 4) then
          Splitting = 1
      end          
   end

   if Splitting > 0 then
      NewX = arcCentreX + arcCentreX - currentX
      NewY = arcCentreY + arcCentreY - currentY
      post.NonModalNumber (" X", NewX * scale, "0.0000")
      post.NonModalNumber (" Y", NewY * scale, "0.0000")
      post.Text (" I")
      post.Number (Ival * scale, "0.0000")
      post.Text (" J")
      post.Number (Jval * scale, "0.0000")
      post.Eol()
      Ival = -Ival
      Jval = -Jval
   end


   post.NonModalNumber (" X", endX * scale, "0.0000")
   post.NonModalNumber (" Y", endY * scale, "0.0000")
   post.Text (" I")
   post.Number (Ival * scale, "0.0000")
   post.Text (" J")
   post.Number (Jval * scale, "0.0000")
   post.Eol()
end


function OnPenDown()
   post.Text(" M900\n")
   
   post.CancelModalNumbers()
   post.ModalText ("")
end


function OnPenUp()
   -- Move head Up to safety Z
   post.Text (" M05\n")
   post.Text (" M901\n")
   post.CancelModalNumbers()
   post.ModalText ("")
end


function OnNewOperation()
   if (plungeRate <= 0) then
      post.Warning("WARNING: Plunge rate is zero")
   end
   if (feedRate <= 0) then
      post.Warning("WARNING: Feed rate is zero")
   end
   post.CancelModalNumbers()
   post.ModalText ("")
end

function OnComment()
  post.Text(" (",commentText,")\n")
end

function OnNewPart()
end

function OnDrill()
end
